aes-pipe
========

work damnit 

This is a simple program to demonstrate the OpenSSL EVP API for symmetric cryptography.  There are a number of examples out there that demonstrate a simple use of this API to encrypt / decrypt a small number of blocks typically using a password and a salt.  I specifically wanted an example program that demonstrated what I would call 'bulk encryption' using a static key and IV.

I put together this example when I wasn't able to find an existing one that met the above criteria.  A program designed for use in a UNIX shell pipeline seemed to be the logical solution to this problem.  Specifically this program takes a key file and either '--encrypt' or '--decrypt' as a parameter on the command line.  It then selects the appropriate AES algorithm (in CBC mode) based on the key size and either encrypts or decrypts data read from stdin.  The encrypted output is written to stdout.

When encrypting, a random IV must be generated and we write this as the first bytes of the data stream.  This requires that when decrypting, the first bytes are removed from the stream and used as the IV.  I don't think there's anything 'standard' about this format but it seemed like the easiest way to persist the IV for easy retrieval.

Though more 'real' than most examples I was able to find this is by no means a program intended for use in the real world.  It suffers from a number of shortcomings that includes, but isn't limited to requiring the encryption key be in a disk on the file system.  Use at your own risk, YMMV, and other disclaimers.  Feedback is always welcome.

dependencies
============

This project requires the following software packages to build successfully on
a Debian system:

build-essential, autoconf, automake, pkg-config, libssl-dev

building
========
This is one of my first go's at using autotools.  Set it up on your system and create all of the build stuff before trying to ./configure:
$ aclocal && autoconf && automake -a
$ ./configure && make

There are a few tests in ./test directory.  Look here for invocation examples.
